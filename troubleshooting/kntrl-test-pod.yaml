apiVersion: v1
kind: Pod
metadata:
  name: kntrl-test
spec:
  hostNetwork: true
  hostPID: true
  
  initContainers:
    # Init container to set up eBPF environment
    - name: init-ebpf
      image: alpine:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Initializing eBPF environment..."
          # Create BPF filesystem directory if it doesn't exist
          mkdir -p /sys/fs/bpf
          
          # Mount BPF filesystem if not already mounted
          if ! mount | grep -q "bpf on /sys/fs/bpf"; then
            mount -t bpf bpf /sys/fs/bpf || echo "Failed to mount BPF filesystem (may already be mounted)"
          fi
          
          # Ensure debug filesystem is mounted
          if ! mount | grep -q "debugfs on /sys/kernel/debug"; then
            mount -t debugfs debugfs /sys/kernel/debug || echo "Failed to mount debug filesystem (may already be mounted)"
          fi
          
          # Set kernel parameters for eBPF
          sysctl -w kernel.unprivileged_bpf_disabled=1 || echo "Could not set kernel.unprivileged_bpf_disabled"
          sysctl -w net.core.bpf_jit_enable=1 || echo "Could not set net.core.bpf_jit_enable"
          
          echo "eBPF environment initialization complete"
      securityContext:
        privileged: true
      volumeMounts:
        - name: sys-kernel-debug
          mountPath: /sys/kernel/debug
        - name: sys-fs-bpf
          mountPath: /sys/fs/bpf
  
  containers:
    # kntrl test container
    - name: kntrl-test
      image: alpine:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Setting up kntrl security agent..."
          
          # Install dependencies
          apk add --no-cache wget curl ca-certificates libcap strace
          
          # Download kntrl binary for arm64
          echo "Downloading kntrl v0.1.3 binary..."
          wget -q -O /kntrl https://github.com/kondukto-io/kntrl/releases/download/v0.1.3/kntrl_arm64.arm64
          chmod +x /kntrl
          
          # Verify download
          if [ -f /kntrl ] && [ -x /kntrl ]; then
            echo "kntrl binary downloaded and executable"
          else
            echo "Failed to download or make kntrl executable"
            exit 1
          fi
          
          # Set unlimited memlock limit (crucial for eBPF)
          ulimit -l unlimited
          
          # Show version and help (will show available flags)
          echo "kntrl version:"
          /kntrl --version || echo "Failed to get version"
          
          echo "kntrl run help:"
          /kntrl run --help || echo "Failed to get help"
          
          echo "System info:"
          uname -a
          
          echo "Checking mounted filesystems:"
          mount | grep -E "debugfs|bpf"
          
          echo "Checking debug filesystem access:"
          ls -la /sys/kernel/debug || echo "Could not access debug filesystem"
          
          echo "Checking BPF filesystem access:"
          ls -la /sys/fs/bpf || echo "Could not access BPF filesystem"
          
          # Create output directory with the right permissions
          mkdir -p /tmp/kntrl
          chmod 777 /tmp/kntrl
          
          echo "Capturing detailed strace output for the first 10 seconds of kntrl execution..."
          # Run strace to debug why kntrl might be failing
          strace -f -o /tmp/kntrl_strace.log /kntrl run \
            --mode=monitor \
            --allowed-hosts=github.com,api.github.com,*.github.io,*.githubusercontent.com,download.kondukto.io \
            --allow-local-ranges=true \
            --allow-github-meta=true \
            --verbose &
            
          KNTRL_PID=$!
          echo "kntrl started with strace with PID: $KNTRL_PID"
          
          # Let it run for 10 seconds
          sleep 10
          
          # Check if it's still running
          if kill -0 $KNTRL_PID 2>/dev/null; then
            echo "kntrl still running after 10 seconds (good sign)"
            kill $KNTRL_PID
          else
            echo "kntrl terminated within 10 seconds (troubleshoot)"
          fi
          
          echo "Strace output (last 100 lines):"
          tail -n 100 /tmp/kntrl_strace.log
          
          echo "Now trying without strace for normal operation..."
          # Try running normally with foreground execution
          echo "Running kntrl in foreground mode (will show all output):"
          /kntrl run \
            --mode=monitor \
            --allowed-hosts=github.com,api.github.com,*.github.io,*.githubusercontent.com,download.kondukto.io \
            --allow-local-ranges=true \
            --allow-github-meta=true \
            --verbose
          
          # This will not execute unless kntrl terminates
          echo "kntrl foreground execution completed"
          
          # Keep the container running for logs examination
          echo "Exiting container (check logs with kubectl logs kntrl-test)"
      resources:
        requests:
          memory: "128Mi"
          cpu: "50m"
        limits:
          memory: "256Mi"
          cpu: "100m"
      securityContext:
        privileged: true
        capabilities:
          add:
            - SYS_ADMIN
            - NET_ADMIN
            - SYS_PTRACE
            - NET_RAW
            - IPC_LOCK
      volumeMounts:
        - name: sys-kernel-debug
          mountPath: /sys/kernel/debug
        - name: sys-fs-bpf
          mountPath: /sys/fs/bpf
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: tmp-vol
          mountPath: /tmp
  
  # Define required volumes
  volumes:
    - name: tmp-vol
      emptyDir: {}
    - name: sys-kernel-debug
      hostPath:
        path: /sys/kernel/debug
    - name: sys-fs-bpf
      hostPath:
        path: /sys/fs/bpf
    - name: lib-modules
      hostPath:
        path: /lib/modules