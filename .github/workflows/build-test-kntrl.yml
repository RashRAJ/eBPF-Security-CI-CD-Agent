name: Modified Kntrl Test Workflow

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-kntrl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Kernel Information
        id: kernel-info
        run: |
          echo "KERNEL_VERSION=$(uname -r)" >> $GITHUB_ENV
          echo "ARCHITECTURE=$(uname -m)" >> $GITHUB_ENV
          echo "Kernel: $(uname -r)"
          echo "Architecture: $(uname -m)"

      - name: Setup eBPF Environment
        run: |
          echo "Setting up eBPF environment..."
          # Ensure debugging filesystem is mounted properly
          sudo mkdir -p /sys/fs/bpf
          sudo mount -t bpf bpf /sys/fs/bpf || echo "BPF filesystem may already be mounted"
          
          # Set kernel parameters for eBPF
          sudo sysctl -w kernel.unprivileged_bpf_disabled=1 || echo "Could not set kernel.unprivileged_bpf_disabled"
          sudo sysctl -w net.core.bpf_jit_enable=1 || echo "Could not set net.core.bpf_jit_enable"
          
          # Set unlimited memlock limit (crucial for eBPF)
          sudo sh -c "ulimit -l unlimited"
          
          echo "eBPF environment setup complete"

      - name: Install Kntrl (Direct Binary)
        run: |
          # Determine correct binary based on architecture
          if [ "${{ env.ARCHITECTURE }}" == "aarch64" ] || [ "${{ env.ARCHITECTURE }}" == "arm64" ]; then
            KNTRL_BINARY="kntrl_arm64.arm64"
          else
            KNTRL_BINARY="kntrl_amd64.amd64"
          fi
          
          echo "Downloading kntrl binary: $KNTRL_BINARY"
          curl -L -o kntrl https://github.com/kondukto-io/kntrl/releases/download/v0.1.3/$KNTRL_BINARY
          chmod +x kntrl
          sudo mv kntrl /usr/local/bin/kntrl
          
          # Verify installation
          kntrl --version

      - name: Start Kntrl with Fallback Options
        run: |
          echo "Starting kntrl with primary configuration..."
          # Create log directory
          sudo mkdir -p /tmp/kntrl-logs
          sudo chmod 777 /tmp/kntrl-logs
          
          # Try trace mode first (less intrusive than monitor mode)
          echo "Attempting to start kntrl in TRACE mode..."
          sudo /usr/local/bin/kntrl run \
            --mode=trace \
            --allowed-hosts=github.com,api.github.com,*.github.io,*.githubusercontent.com,docker.io \
            --allow-local-ranges=true \
            --allow-github-meta=true \
            --output-file-name=/tmp/kntrl-logs/kntrl.out \
            --verbose > /tmp/kntrl-logs/trace.log 2>&1 &
          
          KNTRL_PID=$!
          echo "kntrl started with PID: $KNTRL_PID"
          
          # Give it time to initialize
          sleep 5
          
          # Check if running
          if ps -p $KNTRL_PID > /dev/null; then
            echo "✅ kntrl is running in TRACE mode"
          else
            echo "⚠️ kntrl failed to start in TRACE mode. Logs:"
            cat /tmp/kntrl-logs/trace.log
            
            echo "Attempting fallback to MONITOR mode with simpler configuration..."
            sudo /usr/local/bin/kntrl run \
              --mode=monitor \
              --allowed-hosts=github.com,api.github.com,docker.io \
              --allow-local-ranges=true \
              --verbose > /tmp/kntrl-logs/monitor.log 2>&1 &
            
            KNTRL_PID=$!
            echo "kntrl started with PID: $KNTRL_PID (monitor mode)"
            
            # Give it time to initialize
            sleep 5
            
            # Check if running
            if ps -p $KNTRL_PID > /dev/null; then
              echo "✅ kntrl is running in MONITOR mode"
            else
              echo "⚠️ kntrl failed to start in MONITOR mode. Logs:"
              cat /tmp/kntrl-logs/monitor.log
              
              echo "Attempting non-eBPF fallback method for network monitoring..."
              # This is a simplified fallback that just uses tcpdump for network monitoring
              sudo apt-get update && sudo apt-get install -y tcpdump
              sudo tcpdump -i any -n host github.com -c 5 > /tmp/kntrl-logs/network.log 2>&1 &
              echo "✅ Using tcpdump as fallback monitoring method"
            fi
          fi

      - name: Test Network Activity
        run: |
          echo "Testing network activity detection..."
          # Test with a simple network request
          curl -s -o /dev/null https://github.com
          curl -s -o /dev/null https://api.github.com/zen
          
          # Give kntrl time to process
          sleep 3
          
          # Check for output files
          if [ -f /tmp/kntrl-logs/kntrl.out ]; then
            echo "Kntrl output file contents:"
            cat /tmp/kntrl-logs/kntrl.out
          else
            echo "No kntrl output file found."
          fi
          
          # Check for running processes
          echo "Checking for running monitoring processes:"
          ps aux | grep -E "kntrl|tcpdump" | grep -v grep

      - name: Gather Diagnostics
        if: always()
        run: |
          echo "===== System Information ====="
          uname -a
          
          echo "===== Mounted Filesystems ====="
          mount | grep -E "debugfs|bpf"
          
          echo "===== eBPF Support ====="
          ls -la /sys/fs/bpf/
          
          echo "===== kntrl Logs ====="
          for log in /tmp/kntrl-logs/*.log; do
            if [ -f "$log" ]; then
              echo "--- $log ---"
              cat "$log"
            fi
          done
          
          echo "===== Network Monitoring ====="
          if [ -f /tmp/kntrl-logs/network.log ]; then
            cat /tmp/kntrl-logs/network.log
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up resources..."
          sudo pkill -f kntrl || true
          sudo pkill -f tcpdump || true